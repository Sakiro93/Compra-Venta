--CREAMOS LA BASE DE DATOS
CREATE DATABASE VENTA_SERVICIOS
--USAR BASE DE DATOS
GO
USE VENTA_SERVICIOS
--AUTORIZAR BASE DE DATOS
GO
ALTER AUTHORIZATION ON DATABASE:: VENTA_SERVICIOS TO SA

--------------------------CREACION DE LAS TABLAS FUERTES-----------------------------------
GO
CREATE TABLE PROVEEDOR
(IDPROVEEDOR INT PRIMARY KEY IDENTITY,
RAZONSOCIAL VARCHAR(50) UNIQUE NOT NULL,
RUC VARCHAR(13) UNIQUE NOT NULL, TELEFONO VARCHAR(10)UNIQUE NOT NULL,
EMAIL VARCHAR(30), DIRECCION VARCHAR(50) NOT NULL)

CREATE TABLE CLIENTE
(IDCLIENTE INT PRIMARY KEY IDENTITY,
CEDULA VARCHAR(10) UNIQUE NOT NULL,
NOMBRES VARCHAR(50) NOT NULL,APELLIDOS VARCHAR(50) NOT NULL, TELEFONO VARCHAR(10),
EMAIL VARCHAR(30),DIRECCION VARCHAR(50), SEXO BIT DEFAULT (0))

CREATE TABLE SERVICIO
(IDSERVICIO INT PRIMARY KEY IDENTITY,
DESCRIPCION VARCHAR(50) UNIQUE NOT NULL, PRECIO REAL CHECK (PRECIO >=0))

CREATE TABLE PARTE
(IDPARTE INT PRIMARY KEY IDENTITY,
DESCRIPCION VARCHAR(50) UNIQUE NOT NULL)

--------------------------CREACION DE LAS TABLAS DÉBILES-----------------------------------
GO
CREATE TABLE ACCESORIO
(IDACCESORIO INT PRIMARY KEY IDENTITY,
IDPARTE INT REFERENCES PARTE (IDPARTE),
NOMBRE VARCHAR(50) NOT NULL,
STOCK INT CHECK (STOCK >=0),
COSTO REAL CHECK (COSTO >=0),
PVP REAL CHECK (PVP >=0))

CREATE TABLE COMPRA
(IDCOMPRA INT PRIMARY KEY IDENTITY,
FECHA_REGISTRO DATE,
IDPROVEEDOR INT REFERENCES PROVEEDOR (IDPROVEEDOR),
SUBTOTAL REAL CHECK (SUBTOTAL >=0),
IVA REAL CHECK (IVA >=0),
DESCUENTO REAL CHECK (DESCUENTO >=0),
TOTAL REAL CHECK (TOTAL >=0)
)

CREATE TABLE COMPRAINVENTARIO
(IDCOMPRA INT REFERENCES COMPRA (IDCOMPRA),
IDACCESORIO INT REFERENCES ACCESORIO (IDACCESORIO),
CANTIDAD INT CHECK (CANTIDAD >=0),
COSTO REAL CHECK (COSTO >=0))

CREATE TABLE VENTA
(IDVENTA INT PRIMARY KEY IDENTITY,
IDCLIENTE INT REFERENCES CLIENTE (IDCLIENTE),
FECHA_REGISTRO DATE,
SUBTOTAL REAL CHECK (SUBTOTAL >=0),
IVA REAL CHECK (IVA >=0),
DESCUENTO REAL CHECK (DESCUENTO >=0),
TOTAL REAL CHECK (TOTAL >=0))

CREATE TABLE VENTASERVICIO
(IDVENTA INT REFERENCES VENTA (IDVENTA),
IDSERVICIO INT REFERENCES SERVICIO (IDSERVICIO))

CREATE TABLE VENTADETALLE
(IDVENTA INT REFERENCES VENTA (IDVENTA),
IDACCESORIO INT REFERENCES ACCESORIO (IDACCESORIO),
CANTIDAD INT CHECK (CANTIDAD >=0),
COSTO REAL CHECK (COSTO >=0))

---------------------------TABLAS DE AUDITORIA--------------------------
GO
CREATE TABLE AUDIT_PROVEEDOR
(IDPROVEEDOR INT,RAZONSOCIAL VARCHAR(50),
RUC VARCHAR(13), TELEFONO VARCHAR(10),
EMAIL VARCHAR(30), DIRECCION VARCHAR(50),
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_CLIENTE
(IDCLIENTE INT,CEDULA VARCHAR(10),
NOMBRES VARCHAR(50),APELLIDOS VARCHAR(50) NOT NULL,TELEFONO VARCHAR(10),
EMAIL VARCHAR(30),DIRECCION VARCHAR(50), SEXO BIT,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_SERVICIO
(IDSERVICIO INT,
DESCRIPCION VARCHAR(50), PRECIO REAL,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_PARTE
(IDPARTE INT,DESCRIPCION VARCHAR(50),
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_ACCESORIO
(IDACCESORIO INT,IDPARTE INT,
NOMBRE VARCHAR(50),STOCK INT,
COSTO REAL,PVP REAL,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_COMPRA
(IDCOMPRA INT,FECHA_REGISTRO DATE,
IDPROVEEDOR INT,SUBTOTAL REAL,
IVA REAL,DESCUENTO REAL,
TOTAL REAL, 
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_COMPRAINVENTARIO
(IDCOMPRA INT,IDACCESORIO INT,
CANTIDAD INT,COSTO REAL,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_VENTA
(IDVENTA INT,IDCLIENTE INT,
FECHA_REGISTRO DATE,SUBTOTAL REAL,
IVA REAL,DESCUENTO REAL,
TOTAL REAL,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_VENTASERVICIO
(IDVENTA INT,IDSERVICIO INT,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

CREATE TABLE AUDIT_VENTADETALLE
(IDVENTA INT,IDACCESORIO INT,
CANTIDAD INT,COSTO REAL,
FECHA DATE, HORA TIME,
USUARIO VARCHAR(40),ESTACION VARCHAR(40),
TIPO CHAR(1))

------------------------------INDICE CON DUPLICADOS---------------------------------
--CLIENTE
GO
CREATE INDEX IX_BUSCLIENTE ON CLIENTE(IDCLIENTE,CEDULA,NOMBRES,APELLIDOS)

--PROVEEDOR
GO
CREATE INDEX IX_BUSPROVEEDOR ON PROVEEDOR(IDPROVEEDOR,RUC,RAZONSOCIAL)

-------------------------INDICE SIN DUPLICADOS------------------------------
---------NO ES NECESARIO--------

--------------------------------VISTAS DE TABLAS--------------------------------------

GO
CREATE VIEW VW_PROVEEDOR
AS
SELECT * FROM PROVEEDOR

GO
CREATE VIEW VW_CLIENTE
AS
SELECT * FROM CLIENTE

GO
CREATE VIEW VW_SERVICIO
AS
SELECT * FROM SERVICIO

GO
CREATE VIEW VW_PARTE
AS
SELECT * FROM PARTE

GO
CREATE VIEW VW_COMPRA
AS
SELECT * FROM COMPRA

GO
CREATE VIEW VW_VENTA
AS
SELECT * FROM VENTA

GO
CREATE VIEW VW_VENTADETALLE
AS
SELECT * FROM VENTADETALLE

GO
CREATE VIEW VW_VENTASERVICIO
AS
SELECT * FROM VENTASERVICIO

GO
CREATE VIEW VW_COMPRAINVENTARIO
AS
SELECT * FROM COMPRAINVENTARIO

GO
CREATE VIEW VW_ACCESORIO
AS
SELECT * FROM ACCESORIO

GO
CREATE VIEW VW_AUDIT_PROVEEDOR
AS
SELECT * FROM AUDIT_PROVEEDOR

GO
CREATE VIEW VW_AUDIT_CLIENTE
AS
SELECT * FROM AUDIT_CLIENTE

GO
CREATE VIEW VW_AUDIT_SERVICIO
AS
SELECT * FROM AUDIT_SERVICIO

GO
CREATE VIEW VW_AUDIT_PARTE
AS
SELECT * FROM AUDIT_PARTE

GO
CREATE VIEW VW_AUDIT_COMPRA
AS
SELECT * FROM AUDIT_COMPRA

GO
CREATE VIEW VW_AUDIT_VENTA
AS
SELECT * FROM AUDIT_VENTA

GO
CREATE VIEW VW_AUDIT_VENTADETALLE
AS
SELECT * FROM AUDIT_VENTADETALLE

GO
CREATE VIEW VW_AUDIT_VENTASERVICIO
AS
SELECT * FROM AUDIT_VENTASERVICIO

GO
CREATE VIEW VW_AUDIT_COMPRAINVENTARIO
AS
SELECT * FROM AUDIT_COMPRAINVENTARIO

GO
CREATE VIEW VW_AUDIT_ACCESORIO
AS
SELECT * FROM AUDIT_ACCESORIO

-----------------------PROCEDIMIENTOS ALMACENADOS-----------------------
GO
CREATE PROC SP_HISTORIAL
@OPC INT, @FILTRO VARCHAR(20), @ID AS INT
AS
IF @OPC=0
BEGIN
 SELECT V.IDVENTA,(C.NOMBRES+' '+C.APELLIDOS ),V.FECHA_REGISTRO,V.SUBTOTAL,V.IVA,V.DESCUENTO,V.TOTAL,V.FECHA,V.HORA,V.USUARIO,V.ESTACION,V.TIPO FROM VW_AUDIT_VENTA V,CLIENTE C WHERE V.IDCLIENTE=C.IDCLIENTE AND (V.IDVENTA LIKE '%'+ @FILTRO +'%' OR C.NOMBRES LIKE '%'+ @FILTRO +'%' OR C.APELLIDOS LIKE '%'+ @FILTRO +'%')
END
ELSE IF @OPC=1
BEGIN
SELECT C.IDCOMPRA,C.FECHA_REGISTRO,P.RAZONSOCIAL,C.SUBTOTAL,C.IVA,C.DESCUENTO,C.TOTAL,C.FECHA,C.HORA,C.USUARIO,C.ESTACION,C.TIPO FROM VW_AUDIT_COMPRA C,PROVEEDOR P WHERE C.IDPROVEEDOR=P.IDPROVEEDOR AND (C.IDCOMPRA LIKE '%'+ @FILTRO +'%' OR P.RAZONSOCIAL LIKE '%'+ @FILTRO +'%')
END
ELSE IF @OPC=2
BEGIN
SELECT I.IDCOMPRA,A.NOMBRE,I.CANTIDAD,I.COSTO,I.FECHA,I.HORA,I.USUARIO,I.ESTACION,I.TIPO FROM VW_AUDIT_COMPRAINVENTARIO I,ACCESORIO A WHERE I.IDACCESORIO=A.IDACCESORIO AND I.IDCOMPRA=@ID AND (A.NOMBRE LIKE '%'+ @FILTRO +'%')
END
ELSE IF @OPC=3
BEGIN
SELECT D.IDVENTA,A.NOMBRE,D.CANTIDAD,D.COSTO,D.FECHA,D.HORA,D.USUARIO,D.ESTACION,D.TIPO FROM AUDIT_VENTADETALLE D,ACCESORIO A WHERE D.IDACCESORIO=A.IDACCESORIO AND D.IDVENTA=@ID AND (A.NOMBRE LIKE '%'+ @FILTRO +'%')
END
ELSE IF @OPC=4
BEGIN
SELECT V.IDVENTA,S.DESCRIPCION,V.FECHA,V.HORA,V.USUARIO,V.ESTACION,V.TIPO FROM VW_AUDIT_VENTASERVICIO V, SERVICIO S WHERE V.IDSERVICIO=S.IDSERVICIO AND V.IDVENTA=@ID AND (S.DESCRIPCION LIKE '%'+ @FILTRO +'%')
END



GO
CREATE PROC SP_PROVEEDOR
@OPC VARCHAR(3), @COD INT, @RAZON VARCHAR(50), @RUC VARCHAR(13), 
@TELEFONO VARCHAR(10), @EMAIL VARCHAR(30), @DIRECCION VARCHAR(50)
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO PROVEEDOR VALUES(@RAZON,@RUC,@TELEFONO,@EMAIL,@DIRECCION)
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM PROVEEDOR WHERE IDPROVEEDOR=@COD
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE PROVEEDOR SET RAZONSOCIAL=@RAZON,RUC=@RUC,TELEFONO=@TELEFONO,EMAIL=@EMAIL,DIRECCION=@DIRECCION WHERE IDPROVEEDOR=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 

GO
CREATE PROC SP_CLIENTE
@OPC VARCHAR(3), @COD INT, @CEDULA VARCHAR(10), @NOMBRES VARCHAR(50), @APELLIDOS VARCHAR(50),
@TELEFONO VARCHAR(10), @EMAIL VARCHAR(30),@DIRECCION VARCHAR(50) ,@SEXO BIT
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO CLIENTE VALUES(@CEDULA,@NOMBRES,@APELLIDOS,@TELEFONO,@EMAIL,@DIRECCION,@SEXO)
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE CLIENTE SET CEDULA=@CEDULA,NOMBRES=@NOMBRES,APELLIDOS=@APELLIDOS,TELEFONO=@TELEFONO,EMAIL=@EMAIL,DIRECCION=@DIRECCION,SEXO=@SEXO WHERE IDCLIENTE=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM CLIENTE WHERE IDCLIENTE=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 

GO
CREATE PROC SP_SERVICIO
@OPC VARCHAR(3), @COD INT, @DESCRIPCION VARCHAR(50), @PRECIO REAL
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO SERVICIO VALUES(@DESCRIPCION,@PRECIO)
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE SERVICIO SET DESCRIPCION=@DESCRIPCION,PRECIO=@PRECIO WHERE IDSERVICIO=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM SERVICIO WHERE IDSERVICIO=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 


GO
CREATE PROC SP_PARTE
@OPC VARCHAR(3), @COD INT, @DESCRIPCION VARCHAR(50)
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO PARTE VALUES(@DESCRIPCION)
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE PARTE SET DESCRIPCION=@DESCRIPCION WHERE IDPARTE=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM PARTE WHERE IDPARTE=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 



GO
CREATE PROC SP_VENTASERVICIO
@OPC VARCHAR(3), @CODVENTA INT, @CODSERVICIO INT
AS
DECLARE @IDVENTA INT=(SELECT ISNULL(MAX(IDVENTA),0) FROM VENTA)
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO VENTASERVICIO VALUES(@IDVENTA,@CODSERVICIO)
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 


GO
CREATE PROC SP_VENTADETALLE
@OPC VARCHAR(3), @CODVENTA INT, @CODACCESORIO INT, @CANTIDAD INT, @COSTO REAL
AS
DECLARE @IDVENTA INT=(SELECT ISNULL(MAX(IDVENTA),0) FROM VENTA)
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO VENTADETALLE VALUES(@IDVENTA,@CODACCESORIO,@CANTIDAD,CAST(@COSTO AS decimal(8,2)))
UPDATE ACCESORIO SET STOCK=(STOCK-@CANTIDAD) WHERE IDACCESORIO=@CODACCESORIO
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 

GO
CREATE PROC SP_COMPRAINVENTARIO
@OPC VARCHAR(3), @CODCOMPRA INT, @CODACCESORIO INT, @CANTIDAD INT, @COSTO REAL
AS
DECLARE @IDCOMPRA INT=(SELECT ISNULL(MAX(IDCOMPRA),0) FROM COMPRA)
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO COMPRAINVENTARIO VALUES(@IDCOMPRA,@CODACCESORIO,@CANTIDAD,CAST(@COSTO AS decimal(8,2)))
UPDATE ACCESORIO SET STOCK=(STOCK+@CANTIDAD) WHERE IDACCESORIO=@CODACCESORIO
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 


GO
CREATE PROC SP_ACCESORIO
@OPC VARCHAR(3), @COD INT, @CODPARTE INT, @NOMBRE VARCHAR(50), @STOCK INT, @COSTO REAL, @PVP REAL
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO ACCESORIO VALUES(@CODPARTE,@NOMBRE,@STOCK,@COSTO,@PVP)
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE ACCESORIO SET IDPARTE=@CODPARTE,NOMBRE=@NOMBRE,STOCK=@STOCK,COSTO=@COSTO,PVP=@PVP WHERE IDACCESORIO=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM ACCESORIO WHERE IDACCESORIO=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
 SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 


GO
CREATE PROC SP_COMPRA
@OPC VARCHAR(3), @COD INT, @FECHA_REGISTRO DATE, @CODPROVEEDOR INT, @SUBTOTAL REAL, @IVA REAL, @DESCUENTO REAL, @TOTAL REAL
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO COMPRA VALUES(GETDATE(),@CODPROVEEDOR,CAST(@SUBTOTAL AS decimal(8,2)),CAST(@IVA AS decimal(8,2)),CAST(@DESCUENTO AS decimal(8,2)),CAST(@TOTAL AS decimal(8,2)))
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE COMPRA SET FECHA_REGISTRO=@FECHA_REGISTRO,IDPROVEEDOR=@CODPROVEEDOR,SUBTOTAL=@SUBTOTAL,IVA=@IVA,DESCUENTO=@DESCUENTO,TOTAL=@TOTAL WHERE IDCOMPRA=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM COMPRA WHERE IDCOMPRA=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 



GO
CREATE PROC SP_VENTA
@OPC VARCHAR(3), @COD INT, @CODCLIENTE INT, @FECHA_REGISTRO DATE, @SUBTOTAL REAL, @IVA REAL, @DESCUENTO REAL, @TOTAL REAL
AS
DECLARE @MENSAJE VARCHAR(50)
DECLARE @NUMERO INT
DECLARE @SEVERIDAD INT
DECLARE @ESTADO INT 
BEGIN TRY
  BEGIN TRANSACTION
IF @OPC='INS'
BEGIN
INSERT INTO VENTA VALUES(@CODCLIENTE,@FECHA_REGISTRO,CAST(@SUBTOTAL AS decimal(8,2)),CAST(@IVA AS decimal(8,2)),CAST(@DESCUENTO AS decimal(8,2)),CAST(@TOTAL AS decimal(8,2)))
END
ELSE IF @OPC='MOD'
BEGIN
UPDATE VENTA SET IDCLIENTE=@CODCLIENTE,FECHA_REGISTRO=@FECHA_REGISTRO,SUBTOTAL=@SUBTOTAL,IVA=@IVA,DESCUENTO=@DESCUENTO,TOTAL=@TOTAL WHERE IDVENTA=@COD
END
ELSE IF @OPC='ELI'
BEGIN
DELETE FROM VENTA WHERE IDVENTA=@COD
END
COMMIT TRANSACTION
 END TRY
BEGIN CATCH
SELECT @NUMERO = ERROR_NUMBER()
 IF @NUMERO=2627
 BEGIN
 SET @MENSAJE='Dato ya existe'
 END
 ELSE IF @NUMERO=547
 BEGIN
 SET @MENSAJE='Dato dependiente'
 END 
 SELECT @SEVERIDAD = ERROR_SEVERITY(),@ESTADO = ERROR_STATE()
 ROLLBACK TRANSACTION
 RAISERROR(@MENSAJE,@SEVERIDAD,@ESTADO)
END CATCH 

------------------------TRIGGERS PARA LAS AUDITORIAS--------------------------
GO 
CREATE TRIGGER TR_PROVEEDOR
ON PROVEEDOR
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @RAZON_I VARCHAR(50)
DECLARE @RUC_I VARCHAR(13) 
DECLARE @TEL_I VARCHAR(10) 
DECLARE @EMAIL_I VARCHAR(30) 
DECLARE @DIR_I VARCHAR(50)
IF   EXISTS (SELECT * FROM deleted) AND EXISTS (SELECT * FROM inserted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  SELECT @ID_I=IDPROVEEDOR,@RAZON_I=RAZONSOCIAL,@RUC_I=RUC,@TEL_I=TELEFONO,@EMAIL_I=EMAIL,@DIR_I=DIRECCION FROM deleted
  INSERT INTO AUDIT_PROVEEDOR VALUES(@ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'A')
  SELECT @ID_I=IDPROVEEDOR,@RAZON_I=RAZONSOCIAL,@RUC_I=RUC,@TEL_I=TELEFONO,@EMAIL_I=EMAIL,@DIR_I=DIRECCION FROM inserted
  INSERT INTO AUDIT_PROVEEDOR VALUES(@ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'N')
  COMMIT TRANSACTION
END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH 
END
 ELSE IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CURSOR_PROVEEDOR CURSOR FOR SELECT IDPROVEEDOR,RAZONSOCIAL,RUC,TELEFONO,EMAIL,DIRECCION FROM INSERTED 
  OPEN CURSOR_PROVEEDOR
  FETCH CURSOR_PROVEEDOR INTO @ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_PROVEEDOR VALUES(@ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'I')
  FETCH CURSOR_PROVEEDOR INTO @ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I
  END
CLOSE CURSOR_PROVEEDOR
DEALLOCATE CURSOR_PROVEEDOR
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CURSOR_PROVEEDOR
  DEALLOCATE CURSOR_PROVEEDOR
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END
 ELSE IF NOT EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CURSOR_PROVEEDOR CURSOR FOR SELECT IDPROVEEDOR,RAZONSOCIAL,RUC,TELEFONO,EMAIL,DIRECCION FROM DELETED 
  OPEN CURSOR_PROVEEDOR
  FETCH CURSOR_PROVEEDOR INTO @ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_PROVEEDOR VALUES(@ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'D')
  FETCH CURSOR_PROVEEDOR INTO @ID_I,@RAZON_I,@RUC_I,@TEL_I,@EMAIL_I,@DIR_I
  END
CLOSE CURSOR_PROVEEDOR
DEALLOCATE CURSOR_PROVEEDOR
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CURSOR_PROVEEDOR
  DEALLOCATE CURSOR_PROVEEDOR
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_CLIENTE
ON CLIENTE
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @CED_I VARCHAR(10)
DECLARE @NOM_I VARCHAR(50) 
DECLARE @APE_I VARCHAR(50) 
DECLARE @TEL_I VARCHAR(10) 
DECLARE @EMAIL_I VARCHAR(30) 
DECLARE @DIRECCION_I VARCHAR(30) 
DECLARE @SEX_I BIT
IF   EXISTS (SELECT * FROM deleted) AND EXISTS (SELECT * FROM inserted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  SELECT @ID_I=IDCLIENTE,@CED_I=CEDULA,@NOM_I=NOMBRES,@APE_I=APELLIDOS,@TEL_I=TELEFONO,@EMAIL_I=EMAIL,@DIRECCION_I=DIRECCION,@SEX_I=SEXO FROM deleted
  INSERT AUDIT_CLIENTE VALUES(@ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'A')
  SELECT @ID_I=IDCLIENTE,@CED_I=CEDULA,@NOM_I=NOMBRES,@APE_I=APELLIDOS,@TEL_I=TELEFONO,@EMAIL_I=EMAIL,@DIRECCION_I=DIRECCION,@SEX_I=SEXO FROM inserted
  INSERT AUDIT_CLIENTE VALUES(@ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'N')
  COMMIT TRANSACTION
END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH 
END
 ELSE IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_CLIENTE CURSOR FOR SELECT IDCLIENTE,CEDULA,NOMBRES,APELLIDOS,TELEFONO,EMAIL,DIRECCION,SEXO FROM INSERTED 
  OPEN CUR_CLIENTE
  FETCH CUR_CLIENTE INTO @ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_CLIENTE VALUES(@ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'I')
  FETCH CUR_CLIENTE INTO @ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I
  END
CLOSE CUR_CLIENTE
DEALLOCATE CUR_CLIENTE
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_CLIENTE
  DEALLOCATE CUR_CLIENTE
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END
 ELSE IF NOT EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_CLIENTE CURSOR FOR SELECT IDCLIENTE,CEDULA,NOMBRES,APELLIDOS,TELEFONO,EMAIL,DIRECCION,SEXO FROM DELETED 
  OPEN CUR_CLIENTE
  FETCH CUR_CLIENTE INTO @ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_CLIENTE VALUES(@ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'D')
  FETCH CUR_CLIENTE INTO @ID_I,@CED_I,@NOM_I,@APE_I,@TEL_I,@EMAIL_I,@DIRECCION_I,@SEX_I
  END
CLOSE CUR_CLIENTE
DEALLOCATE CUR_CLIENTE
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_CLIENTE
  DEALLOCATE CUR_CLIENTE
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_SERVICIO
ON SERVICIO
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @DESCRIP_I VARCHAR(20)
DECLARE @PRECIO REAL
IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  SELECT @ID_I=IDSERVICIO,@DESCRIP_I=DESCRIPCION,@PRECIO=PRECIO FROM deleted
  INSERT INTO AUDIT_SERVICIO VALUES(@ID_I,@DESCRIP_I,@PRECIO, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'A')
  SELECT @ID_I=IDSERVICIO,@DESCRIP_I=DESCRIPCION,@PRECIO=PRECIO FROM inserted
  INSERT INTO AUDIT_SERVICIO VALUES(@ID_I,@DESCRIP_I,@PRECIO, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'N')
 COMMIT TRANSACTION
 END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH 
END
 ELSE IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_SERVICIO CURSOR FOR SELECT IDSERVICIO,DESCRIPCION,PRECIO FROM INSERTED 
  OPEN CUR_SERVICIO
  FETCH CUR_SERVICIO INTO @ID_I,@DESCRIP_I,@PRECIO
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_SERVICIO VALUES(@ID_I,@DESCRIP_I,@PRECIO, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'I')
  FETCH CUR_SERVICIO INTO @ID_I,@DESCRIP_I,@PRECIO
  END
CLOSE CUR_SERVICIO
DEALLOCATE CUR_SERVICIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_SERVICIO
  DEALLOCATE CUR_SERVICIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH

END
 ELSE IF NOT EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_SERVICIO CURSOR FOR SELECT IDSERVICIO,DESCRIPCION,PRECIO FROM DELETED 
  OPEN CUR_SERVICIO
  FETCH CUR_SERVICIO INTO @ID_I,@DESCRIP_I,@PRECIO
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_SERVICIO VALUES(@ID_I,@DESCRIP_I,@PRECIO, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'D')
  FETCH CUR_SERVICIO INTO @ID_I,@DESCRIP_I,@PRECIO
  END
CLOSE CUR_SERVICIO
DEALLOCATE CUR_SERVICIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_SERVICIO
  DEALLOCATE CUR_SERVICIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_PARTE
ON PARTE
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @DESCRIP_I VARCHAR(20)
IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  SELECT @ID_I=IDPARTE,@DESCRIP_I=DESCRIPCION FROM deleted
  INSERT INTO AUDIT_PARTE VALUES(@ID_I,@DESCRIP_I, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'A')
  SELECT @ID_I=IDPARTE,@DESCRIP_I=DESCRIPCION FROM inserted
  INSERT INTO AUDIT_PARTE VALUES(@ID_I,@DESCRIP_I, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'N')
 COMMIT TRANSACTION
 END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH 
END
 ELSE IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_PARTE CURSOR FOR SELECT IDPARTE,DESCRIPCION FROM INSERTED 
  OPEN CUR_PARTE
  FETCH CUR_PARTE INTO @ID_I,@DESCRIP_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_PARTE VALUES(@ID_I,@DESCRIP_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'I')
  FETCH CUR_PARTE INTO @ID_I,@DESCRIP_I
  END
CLOSE CUR_PARTE
DEALLOCATE CUR_PARTE
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_PARTE
  DEALLOCATE CUR_PARTE
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH

END
 ELSE IF NOT EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_PARTE CURSOR FOR SELECT IDPARTE,DESCRIPCION FROM DELETED 
  OPEN CUR_PARTE
  FETCH CUR_PARTE INTO @ID_I,@DESCRIP_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_PARTE VALUES(@ID_I,@DESCRIP_I, 
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'D')
  FETCH CUR_PARTE INTO @ID_I,@DESCRIP_I
  END
CLOSE CUR_PARTE
DEALLOCATE CUR_PARTE
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_PARTE
  DEALLOCATE CUR_PARTE
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_ACCESORIO
ON ACCESORIO
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @IDPARTE_I INT
DECLARE @NOM_I VARCHAR(50)
DECLARE @STOCK_I INT
DECLARE @COSTO_I REAL
DECLARE @PVP_I REAL

IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  SELECT @ID_I=IDACCESORIO,@IDPARTE_I=IDPARTE,@NOM_I=NOMBRE,@STOCK_I=STOCK,@COSTO_I=COSTO,@PVP_I=PVP FROM deleted
  INSERT INTO AUDIT_ACCESORIO VALUES(@ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'A')
  SELECT @ID_I=IDACCESORIO,@IDPARTE_I=IDPARTE,@NOM_I=NOMBRE,@STOCK_I=STOCK,@COSTO_I=COSTO,@PVP_I=PVP FROM inserted
  INSERT INTO AUDIT_ACCESORIO VALUES(@ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'N')
 COMMIT TRANSACTION
 END TRY
BEGIN CATCH
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH 
END
 ELSE IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
BEGIN
BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_ACCESORIO CURSOR FOR SELECT IDACCESORIO,IDPARTE,NOMBRE,STOCK,COSTO,PVP FROM INSERTED 
  OPEN CUR_ACCESORIO
  FETCH CUR_ACCESORIO INTO @ID_I,@IDPARTE_I,@NOM_I,@STOCK_I,@COSTO_I,@PVP_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_ACCESORIO VALUES(@ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'I')
  FETCH CUR_ACCESORIO INTO @ID_I,@IDPARTE_I,@NOM_I,@STOCK_I,@COSTO_I,@PVP_I
  END
CLOSE CUR_ACCESORIO
DEALLOCATE CUR_ACCESORIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_ACCESORIO
  DEALLOCATE CUR_ACCESORIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH

END
 ELSE IF NOT EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION
  DECLARE CUR_ACCESORIO CURSOR FOR SELECT IDACCESORIO,IDPARTE,NOMBRE,STOCK,COSTO,PVP FROM DELETED 
  OPEN CUR_ACCESORIO
  FETCH CUR_ACCESORIO INTO @ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I
  WHILE @@FETCH_STATUS = 0
  BEGIN
  INSERT INTO AUDIT_ACCESORIO VALUES(@ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I,
  CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
  HOST_NAME(),'D')
  FETCH CUR_ACCESORIO INTO @ID_I,@IDPARTE_I, @NOM_I,@STOCK_I,@COSTO_I,@PVP_I
  END
CLOSE CUR_ACCESORIO
DEALLOCATE CUR_ACCESORIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_ACCESORIO
  DEALLOCATE CUR_ACCESORIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_COMPRA
ON COMPRA
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @FECHA_I DATE
DECLARE @IDPROVEEDOR_I INT
DECLARE @SUBTOTAL_I REAL
DECLARE @IVA_I REAL
DECLARE @DESCUENTO_I REAL
DECLARE @TOTAL_I REAL

IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
 BEGIN
   BEGIN TRY
    BEGIN TRANSACTION
     DECLARE CUR_COMPRA CURSOR FOR SELECT IDCOMPRA,FECHA_REGISTRO,IDPROVEEDOR,SUBTOTAL,IVA,DESCUENTO,TOTAL FROM INSERTED 
     OPEN CUR_COMPRA
     FETCH CUR_COMPRA INTO @ID_I,@FECHA_I,@IDPROVEEDOR_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I
     WHILE @@FETCH_STATUS = 0
     BEGIN
      INSERT INTO AUDIT_COMPRA VALUES(@ID_I,@FECHA_I,@IDPROVEEDOR_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I,
      CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
      HOST_NAME(),'I')
    FETCH CUR_COMPRA INTO @ID_I,@FECHA_I,@IDPROVEEDOR_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I
     END
CLOSE CUR_COMPRA
DEALLOCATE CUR_COMPRA
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_COMPRA
  DEALLOCATE CUR_COMPRA
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_VENTA
ON VENTA
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @IDCLIENTE_I INT
DECLARE @FECHA_I DATE
DECLARE @SUBTOTAL_I REAL
DECLARE @IVA_I REAL
DECLARE @DESCUENTO_I REAL
DECLARE @TOTAL_I REAL

IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
 BEGIN
   BEGIN TRY
    BEGIN TRANSACTION
     DECLARE CUR_VENTA CURSOR FOR SELECT IDVENTA,IDCLIENTE,FECHA_REGISTRO,SUBTOTAL,IVA,DESCUENTO,TOTAL FROM INSERTED 
     OPEN CUR_VENTA
     FETCH CUR_VENTA INTO @ID_I,@IDCLIENTE_I,@FECHA_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I
     WHILE @@FETCH_STATUS = 0
     BEGIN
      INSERT INTO AUDIT_VENTA VALUES(@ID_I,@IDCLIENTE_I,@FECHA_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I,
      CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
      HOST_NAME(),'I')
     FETCH CUR_VENTA INTO @ID_I,@IDCLIENTE_I,@FECHA_I,@SUBTOTAL_I,@IVA_I,@DESCUENTO_I,@TOTAL_I
     END
CLOSE CUR_VENTA
DEALLOCATE CUR_VENTA
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_VENTA
  DEALLOCATE CUR_VENTA
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_VENTADETALLE
ON VENTADETALLE
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @IDACCESORIO_I INT
DECLARE @CANTIDAD_I INT
DECLARE @COSTO_I REAL

IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
 BEGIN
   BEGIN TRY
    BEGIN TRANSACTION
     DECLARE CUR_VENTADETALLE CURSOR FOR SELECT IDVENTA,IDACCESORIO,CANTIDAD,COSTO FROM INSERTED 
     OPEN CUR_VENTADETALLE
     FETCH CUR_VENTADETALLE INTO @ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I
     WHILE @@FETCH_STATUS = 0
     BEGIN
      INSERT INTO AUDIT_VENTADETALLE VALUES(@ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I,
      CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
      HOST_NAME(),'I')
     FETCH CUR_VENTADETALLE INTO @ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I
     END
CLOSE CUR_VENTADETALLE
DEALLOCATE CUR_VENTADETALLE
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_VENTADETALLE
  DEALLOCATE CUR_VENTADETALLE
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_COMPRAINVENTARIO
ON COMPRAINVENTARIO
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ID_I INT
DECLARE @IDACCESORIO_I INT
DECLARE @CANTIDAD_I INT
DECLARE @COSTO_I REAL

IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
 BEGIN
   BEGIN TRY
    BEGIN TRANSACTION
     DECLARE CUR_COMPRAINVENTARIO CURSOR FOR SELECT IDCOMPRA,IDACCESORIO,CANTIDAD,COSTO FROM INSERTED 
     OPEN CUR_COMPRAINVENTARIO
     FETCH CUR_COMPRAINVENTARIO INTO @ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I
     WHILE @@FETCH_STATUS = 0
     BEGIN
      INSERT INTO AUDIT_COMPRAINVENTARIO VALUES(@ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I,
      CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
      HOST_NAME(),'I')
     FETCH CUR_COMPRAINVENTARIO INTO @ID_I,@IDACCESORIO_I,@CANTIDAD_I,@COSTO_I
     END
CLOSE CUR_COMPRAINVENTARIO
DEALLOCATE CUR_COMPRAINVENTARIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_COMPRAINVENTARIO
  DEALLOCATE CUR_COMPRAINVENTARIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END


GO 
CREATE TRIGGER TR_VENTASERVICIO
ON VENTASERVICIO
AFTER INSERT, DELETE, UPDATE
AS
DECLARE @IDVENTA_I INT
DECLARE @IDSERVICIO_I INT

IF EXISTS(SELECT * FROM inserted)AND NOT EXISTS (SELECT * FROM deleted)
 BEGIN
   BEGIN TRY
    BEGIN TRANSACTION
     DECLARE CUR_VENTASERVICIO CURSOR FOR SELECT IDVENTA,IDSERVICIO FROM INSERTED 
     OPEN CUR_VENTASERVICIO
     FETCH CUR_VENTASERVICIO INTO @IDVENTA_I,@IDSERVICIO_I
     WHILE @@FETCH_STATUS = 0
     BEGIN
      INSERT INTO AUDIT_VENTASERVICIO VALUES(@IDVENTA_I,@IDSERVICIO_I,
      CONVERT (date, GETDATE()),CONVERT (TIME, GETDATE()),SYSTEM_USER,
      HOST_NAME(),'I')
     FETCH CUR_VENTASERVICIO INTO @IDVENTA_I,@IDSERVICIO_I
     END
CLOSE CUR_VENTASERVICIO
DEALLOCATE CUR_VENTASERVICIO
COMMIT TRANSACTION
END TRY
BEGIN CATCH
  CLOSE CUR_VENTASERVICIO
  DEALLOCATE CUR_VENTASERVICIO
  ROLLBACK TRANSACTION
  SELECT ERROR_MESSAGE()
END CATCH
END

----------------------CREAR USUARIO----------
GO
USE MASTER
--INICIO DE SESION
GO
CREATE LOGIN USUARIO WITH PASSWORD='123'
--USAR LA BASE DE DATOS QUE SE VA A TENER UN USUARIO
GO
USE VENTA_SERVICIOS
--CREAR UN USUARIO PARA ESTA BASE DE DATOS
GO
CREATE USER USUARIO FOR LOGIN USUARIO